//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryManagementEntities : DbContext
    {
        public InventoryManagementEntities()
            : base("name=InventoryManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int AddProduct(Nullable<int> pid, Nullable<int> did, string pname, Nullable<int> quantity, Nullable<int> price)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            var pnameParameter = pname != null ?
                new ObjectParameter("pname", pname) :
                new ObjectParameter("pname", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", pidParameter, didParameter, pnameParameter, quantityParameter, priceParameter);
        }
    
        public virtual ObjectResult<GetDeptDetails_Result> GetDeptDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeptDetails_Result>("GetDeptDetails");
        }
    
        public virtual ObjectResult<Nullable<int>> GetQuantityCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetQuantityCount");
        }
    
        public virtual ObjectResult<string> GetRole(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRole", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<ListOfProducts_Result> ListOfProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfProducts_Result>("ListOfProducts");
        }
    }
}
